.include "m2560def.inc"

; Define constant for the ports
.equ RESET_BUTTON_BIT = 0 ; Adjust to the specific pin the reset button is connected to

; Constants representing mountain characteristics
.equ MATRIX_SIZE = 15 ; Assuming a 15x15 grid
.equ INITIAL_SEARCH_SPEED_VALUE = 1

; Define the starting addresses for the mountain matrix in SRAM
; Main program start

.org 0x000
jmp main ; Jump to main program

.INCLUDE    "mountain_map.inc"    ; load map from .include file

main:
    ; Configure RESET_BUTTON_BIT as input by clearing the bit in DDRB
    cbi DDRB, RESET_BUTTON_BIT ; Set DDRB to configure the reset button pin as input

    ; Enable pull-up resistor on RESET_BUTTON_BIT
    sbi PORTB, RESET_BUTTON_BIT

    ; Main loop
loop:
    sbic PINB, RESET_BUTTON_BIT ; Skip if button is pressed (assuming active low)
    rjmp loop ; Return to start of loop if button is not pressed

    ; If button is pressed, reset the simulation
    rcall reset_simulation ; Call subroutine that resets your simulation system

    rjmp loop ; Jump back to the start of the loop

reset_simulation:
    CLR         ACCIDENT_X                  ; accident location
    CLR         ACCIDENT_Y
    CLR         GLOBAL1                     ; current location
    CLR         GLOBAL2

    ; Set the initial search speed
    ldi r17, INITIAL_SEARCH_SPEED_VALUE ; Load initial search speed value into r17

    ; The size of the map
    ldi r18, MATRIX_SIZE
    mul r18, r18 ;r1:r0 now contains MATRIX_SIZE * MATRIX_SIZE

    ; Store result in pair register
    mov r28, r0
    mov r29, r1

    ; Reset multiplication result register (if not used later)
    clr r1

    ldi ZH, high(MOUNTAIN_MAP)
    ldi ZL, low(MOUNTAIN_MAP)
	
   ret ; Return from subroutine

; End of program
rjmp main 
